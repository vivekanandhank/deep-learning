# Importing libraries 
import numpy as np
import matplotlib.pyplot as plt
import os
import cv2
import random
import tensorflow as tf
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D

import pickle
datadir=()                           # directory of the file
category=[" "," "]                   # types of field in your project


for i in category:
    path=os.path.join(datadir, i)
    for img in os.listdir(path):
        img_array=cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)
        plt.imshow(img_array, cmap="gray")
        plt.show()
        break
    break
print(img_array.shape)

img_size=110
new_array =cv2.resize(img_array,(img_size,img_size))     # resizing the image to implement the standardisation of images
plt.imshow(new_array,cmap='gray')
plt.show()

train_data=[]

def training_data():
    for cate in category:
        path=os.path.join(datadir, cate)
        class_num=category.index(cate)
        for img in os.listdir(path):
            img_array=cv2.imread(os.path.join(path,img), cv2.IMREAD_GRAYSCALE)
            new_array=cv2.resize(img_array, (img_size,img_size))
            train_data.append([new_array, class_num])
training_data()
print(len(train_data))
            
random.shuffle(train_data)

for sample in train_data:
    print(sample[1])
    
x=[]
y=[]


for features,label in train_data:
    x.append(features)
    y.append(label)
x=np.array(x).reshape(-1, img_size,img_size,1)

X = x/255.0

model = Sequential()

model.add(Conv2D(256, (3, 3), input_shape=X.shape[1:]))        #adding  2D convolution 
model.add(Activation('relu'))                                  # adding Activation Function (relu function)
model.add(MaxPooling2D(pool_size=(2, 2)))                      # adding MaxPooling

model.add(Conv2D(256, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())  # converts 3D feature maps to 1D feature vectors

model.add(Dense(64))

model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

model.fit(X, y, batch_size=32, epochs=10, validation_split=0.3)
